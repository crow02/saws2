// Global variables
let students = [];
let attendanceData = {};
let currentClassroom = '';
let tempImportData = [];

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    updateCurrentDate();
    loadSavedData();
    
    // ‡πÇ‡∏´‡∏•‡∏î URL ‡∏Ç‡∏≠‡∏á Google Sheets ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    const savedUrl = localStorage.getItem('outputSheetUrl');
    if (savedUrl) {
        document.getElementById('outputSheetUrl').value = savedUrl;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    document.getElementById('outputSheetUrl').addEventListener('change', saveOutputSheetUrl);
});

// Update current date
function updateCurrentDate() {
    const date = new Date();
    const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
    };
    document.getElementById('currentDate').textContent = date.toLocaleDateString('th-TH', options);
    document.getElementById('reportDate').value = date.toISOString().split('T')[0];
}

// Switch tabs
function switchTab(tabName) {
    // Update tab buttons
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    event.target.classList.add('active');

    // Update tab content
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(tabName).classList.add('active');

    // Update attendance info when switching to attendance tab
    if (tabName === 'attendance') {
        updateAttendanceInfo();
    }
}

// Load saved data from localStorage
function loadSavedData() {
    const savedStudents = localStorage.getItem('students');
    const savedAttendance = localStorage.getItem('attendanceData');
    
    if (savedStudents) {
        students = JSON.parse(savedStudents);
    }
    
    if (savedAttendance) {
        attendanceData = JSON.parse(savedAttendance);
    }
}

// Save data to localStorage
function saveData() {
    localStorage.setItem('students', JSON.stringify(students));
    localStorage.setItem('attendanceData', JSON.stringify(attendanceData));
}

// Load students for selected classroom
function loadStudents() {
    const classroom = document.getElementById('classSelect').value;
    currentClassroom = classroom;
    
    if (!classroom) return;

    const classStudents = students.filter(s => s.classroom === classroom);
    displayStudents(classStudents);
}

// Display students in attendance grid
function displayStudents(studentList) {
    const grid = document.getElementById('attendanceGrid');
    grid.innerHTML = '';

    studentList.forEach(student => {
        const card = document.createElement('div');
        card.className = `student-card ${student.status || 'present'}`;
        card.innerHTML = `
            <div class="student-name">${student.name}</div>
            <div class="student-id">‡∏£‡∏´‡∏±‡∏™: ${student.id}</div>
            <div class="status-buttons">
                <button class="status-btn ${student.status === 'present' ? 'active' : ''}" 
                        onclick="setStatus('${student.id}', 'present')" style="background: #28a745; color: white;">
                    ‡∏°‡∏≤
                </button>
                <button class="status-btn ${student.status === 'absent' ? 'active' : ''}" 
                        onclick="setStatus('${student.id}', 'absent')" style="background: #dc3545; color: white;">
                    ‡∏Ç‡∏≤‡∏î
                </button>
                <button class="status-btn ${student.status === 'sick' ? 'active' : ''}" 
                        onclick="setStatus('${student.id}', 'sick')" style="background: #ffc107; color: #333;">
                    ‡∏õ‡πà‡∏ß‡∏¢
                </button>
                <button class="status-btn ${student.status === 'activity' ? 'active' : ''}" 
                        onclick="setStatus('${student.id}', 'activity')" style="background: #17a2b8; color: white;">
                    ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                </button>
                <button class="status-btn ${student.status === 'home' ? 'active' : ''}" 
                        onclick="setStatus('${student.id}', 'home')" style="background: #6c757d; color: white;">
                    ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô
                </button>
            </div>
        `;
        grid.appendChild(card);
    });

    updateSummary();
}

// Set student status
function setStatus(studentId, status) {
    const student = students.find(s => s.id === studentId && s.classroom === currentClassroom);
    if (student) {
        student.status = status;
        saveData();
        loadStudents();
    }
}

// Update attendance summary
function updateSummary() {
    const classStudents = students.filter(s => s.classroom === currentClassroom);
    
    const counts = {
        present: 0,
        absent: 0,
        sick: 0,
        activity: 0,
        home: 0
    };

    classStudents.forEach(student => {
        counts[student.status || 'present']++;
    });

    document.getElementById('presentCount').textContent = counts.present;
    document.getElementById('absentCount').textContent = counts.absent;
    document.getElementById('sickCount').textContent = counts.sick;
    document.getElementById('activityCount').textContent = counts.activity;
    document.getElementById('homeCount').textContent = counts.home;
}

// Update attendance info
function updateAttendanceInfo() {
    const classSelect = document.getElementById('classSelect').value;
    const classText = {
        'com-sec-1': 'üì± ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ï‡∏≠‡∏ô 1',
        'com-sec-2': 'üì± ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ï‡∏≠‡∏ô 2',
        'com-sec-3': 'üì± ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ï‡∏≠‡∏ô 3',
        'com-comp': 'üíª ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°'
    };
    document.getElementById('currentClass').textContent = 
        classText[classSelect] || '-';
    document.getElementById('currentTeacher').textContent = 
        document.getElementById('teacherName').value || '-';
    
    const timeSlot = document.getElementById('timeSlot').value;
    const timeSlotText = {
        'morning': 'üåÖ ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏ä‡πâ‡∏≤',
        'afternoon': '‚òÄÔ∏è ‡∏†‡∏≤‡∏Ñ‡∏ö‡πà‡∏≤‡∏¢'
    };
    document.getElementById('currentTimeSlot').textContent = 
        timeSlotText[timeSlot] || '-';
}

// Save attendance
function saveAttendance() {
    const date = new Date().toISOString().split('T')[0];
    const time = new Date().toLocaleTimeString('th-TH');
    const teacher = document.getElementById('teacherName').value;
    const timeSlot = document.getElementById('timeSlot').value;
    const classroom = currentClassroom;

    if (!classroom || !teacher || !timeSlot) {
        showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');
        return;
    }

    const classStudents = students.filter(s => s.classroom === classroom);
    
    if (!attendanceData[date]) {
        attendanceData[date] = [];
    }

    const timeSlotText = {
        'morning': '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏ä‡πâ‡∏≤',
        'afternoon': '‡∏†‡∏≤‡∏Ñ‡∏ö‡πà‡∏≤‡∏¢'
    };

    classStudents.forEach(student => {
        attendanceData[date].push({
            time: time,
            studentId: student.id,
            studentName: student.name,
            classroom: classroom,
            status: student.status || 'present',
            teacher: teacher,
            timeSlot: timeSlotText[timeSlot]
        });
    });

    saveData();
    showAlert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// Load report
function loadReport() {
    const date = document.getElementById('reportDate').value;
    const tbody = document.getElementById('reportBody');
    const table = document.getElementById('reportTable');
    const loading = document.getElementById('loading');

    tbody.innerHTML = '';
    
    if (!date || !attendanceData[date]) {
        table.style.display = 'none';
        return;
    }

    loading.classList.add('active');
    
    setTimeout(() => {
        const records = attendanceData[date];
        
        records.forEach(record => {
            const row = tbody.insertRow();
            row.innerHTML = `
                <td>${record.time}</td>
                <td>${record.studentId}</td>
                <td>${record.studentName}</td>
                <td><span class="status-badge ${record.status}">${getStatusText(record.status)}</span></td>
                <td>${record.teacher}</td>
                <td>${record.timeSlot}</td>
            `;
        });

        loading.classList.remove('active');
        table.style.display = 'table';
    }, 500);
}

// Get status text in Thai
function getStatusText(status) {
    const statusMap = {
        'present': '‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        'absent': '‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        'sick': '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
        'activity': '‡πÑ‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
        'home': '‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô'
    };
    return statusMap[status] || status;
}

// Clear all students
function clearAllStudents() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?')) {
        students = [];
        attendanceData = {};
        saveData();
        loadStudents();
        showAlert('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß', 'success');
    }
}

// Show alert
function showAlert(message, type) {
    const alert = document.getElementById(type + 'Alert');
    alert.textContent = message;
    alert.style.display = 'block';
    
    setTimeout(() => {
        alert.style.display = 'none';
    }, 3000);
}

// Show import help modal
function showImportHelp() {
    document.getElementById('importHelpModal').style.display = 'block';
}

// Close modal
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// Import from Google Sheets
async function importFromSheets() {
    const spreadsheetId = document.getElementById('spreadsheetId').value.trim();
    const range = document.getElementById('sheetRange').value.trim();
    const classroom = document.getElementById('classSelect').value;

    if (!spreadsheetId || !range || !classroom) {
        showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Spreadsheet ID, Range ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'error');
        return;
    }

    // Show loading
    showAlert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets...', 'success');

    try {
        // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
        const API_KEY = 'YOUR_API_KEY_HERE'; // *** ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà API Key ‡∏à‡∏£‡∏¥‡∏á ***
        const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?key=${API_KEY}`;

        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets ‡πÑ‡∏î‡πâ');
        }

        const data = await response.json();
        
        if (!data.values || data.values.length === 0) {
            showAlert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏', 'error');
            return;
        }

        // Process and preview data
        tempImportData = data.values.map(row => ({
            id: row[0] || '',
            name: row[1] || '',
            classroom: row[2] || classroom,
            status: 'present'
        })).filter(student => student.id && student.name);

        showImportPreview(tempImportData);

    } catch (error) {
        console.error('Error importing from Google Sheets:', error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        showAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ô‡∏µ‡πâ', 'error');
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if (spreadsheetId === 'demo') {
            const demoData = [
                { id: '12345', name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', classroom: classroom, status: 'present' },
                { id: '12346', name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', classroom: classroom, status: 'present' },
                { id: '12347', name: '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Ç‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', classroom: classroom, status: 'present' },
                { id: '12348', name: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏î‡∏µ', classroom: classroom, status: 'present' },
                { id: '12349', name: '‡∏™‡∏°‡∏û‡∏£ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡πà‡∏á', classroom: classroom, status: 'present' },
                { id: '12350', name: '‡∏™‡∏°‡πÉ‡∏à ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', classroom: classroom, status: 'present' },
                { id: '12351', name: '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏µ', classroom: classroom, status: 'present' },
                { id: '12352', name: '‡∏™‡∏°‡∏ó‡∏£‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ', classroom: classroom, status: 'present' },
                { id: '12353', name: '‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡∏Ç‡∏¢‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', classroom: classroom, status: 'present' },
                { id: '12354', name: '‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô', classroom: classroom, status: 'present' }
            ];
            tempImportData = demoData;
            showImportPreview(demoData);
            showAlert('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏û‡∏¥‡∏°‡∏û‡πå "demo" ‡πÉ‡∏ô Spreadsheet ID)', 'success');
        }
    }
}

// Show import preview
function showImportPreview(data) {
    const modal = document.getElementById('importPreviewModal');
    const content = document.getElementById('importPreviewContent');
    
    let html = `
        <p>‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${data.length} ‡∏Ñ‡∏ô</p>
        <table class="preview-table">
            <thead>
                <tr>
                    <th>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                    <th>‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</th>
                </tr>
            </thead>
            <tbody>
    `;

    data.forEach(student => {
        html += `
            <tr>
                <td>${student.id}</td>
                <td>${student.name}</td>
                <td>${student.classroom}</td>
            </tr>
        `;
    });

    html += `
            </tbody>
        </table>
    `;

    content.innerHTML = html;
    modal.style.display = 'block';
}

// Confirm import
function confirmImport() {
    const classroom = document.getElementById('classSelect').value;
    let imported = 0;
    let skipped = 0;

    tempImportData.forEach(newStudent => {
        // Check if student already exists
        const exists = students.find(s => 
            s.id === newStudent.id && s.classroom === classroom
        );

        if (!exists) {
            students.push({
                ...newStudent,
                classroom: classroom
            });
            imported++;
        } else {
            skipped++;
        }
    });

    saveData();
    loadStudents();
    closeModal('importPreviewModal');
    
    let message = `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${imported} ‡∏Ñ‡∏ô`;
    if (skipped > 0) {
        message += ` (‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ ${skipped} ‡∏Ñ‡∏ô)`;
    }
    showAlert(message, 'success');
    
    tempImportData = [];
}

// Export to Google Sheets (updated function)
function exportToSheets() {
    const date = document.getElementById('reportDate').value || new Date().toISOString().split('T')[0];
    
    if (!attendanceData[date]) {
        showAlert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'error');
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ export
    showExportInstructions(date);
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ export
function showExportInstructions(date) {
    const records = attendanceData[date];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà copy ‡πÑ‡∏î‡πâ
    const headers = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πá‡∏Å', '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤'];
    const rows = records.map(record => [
        date,
        record.time,
        record.studentId,
        record.studentName,
        record.classroom,
        getStatusText(record.status),
        record.teacher,
        record.timeSlot
    ]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö TSV (Tab-separated values)
    const tsvContent = [headers, ...rows].map(row => row.join('\t')).join('\n');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 900px;">
            <div class="modal-header">
                <h2>üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets</h2>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            
            <div class="help-section">
                <h3>üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)</h3>
                <ol style="margin-left: 20px; color: #555; line-height: 1.8;">
                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
                    <li>‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô A1)</li>
                    <li>‡∏Å‡∏î <strong>Ctrl+V</strong> (Windows) ‡∏´‡∏£‡∏∑‡∏≠ <strong>Cmd+V</strong> (Mac)</li>
                </ol>
                
                <div style="margin: 20px 0; text-align: center;">
                    <button onclick="copyToClipboard('${btoa(unescape(encodeURIComponent(tsvContent)))}')" 
                            style="background: #34a853; padding: 12px 30px; font-size: 16px;">
                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </button>
                    <button onclick="downloadCSV('${date}')" 
                            style="background: #4285f4; padding: 12px 30px; font-size: 16px;">
                        üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                    </button>
                </div>
                
                <h3>üìä ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV</h3>
                <ol style="margin-left: 20px; color: #555; line-height: 1.8;">
                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå</li>
                    <li>‡πÄ‡∏õ‡∏¥‡∏î Google Sheets</li>
                    <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà <strong>‡πÑ‡∏ü‡∏•‡πå > ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</strong></li>
                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å <strong>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</strong> ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV</li>
                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å <strong>‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</strong> ‡∏´‡∏£‡∏∑‡∏≠ <strong>‡∏ú‡∏ô‡∏ß‡∏Å‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</strong></li>
                </ol>
                
                <h3>üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (${records.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</h3>
                <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; overflow-x: auto; max-height: 300px;">
                    <table class="preview-table" style="width: 100%; font-size: 12px;">
                        <thead>
                            <tr>
                                ${headers.map(h => `<th style="position: sticky; top: 0; background: #e0e0e0;">${h}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody>
                            ${rows.slice(0, 10).map(row => `
                                <tr>
                                    ${row.map(cell => `<td>${cell}</td>`).join('')}
                                </tr>
                            `).join('')}
                            ${records.length > 10 ? '<tr><td colspan="8" style="text-align: center;">... ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏µ‡∏Å ' + (records.length - 10) + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</td></tr>' : ''}
                        </tbody>
                    </table>
                </div>
                
                <div class="help-section" style="background: #e8f5e9; padding: 15px; border-radius: 8px; margin-top: 20px;">
                    <h4 style="color: #2e7d32; margin-bottom: 10px;">‚úÖ ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö</h4>
                    <ul style="margin-left: 20px; color: #555;">
                        <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Google Sheets</li>
                        <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ</li>
                        <li>Google Sheets ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
                    </ul>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function copyToClipboard(encodedData) {
    try {
        const data = decodeURIComponent(escape(atob(encodedData)));
        
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(data).then(() => {
                showAlert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üìã ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Google Sheets ‡πÅ‡∏•‡πâ‡∏ß', 'success');
            }).catch(() => {
                fallbackCopyToClipboard(data);
            });
        } else {
            fallbackCopyToClipboard(data);
        }
    } catch (error) {
        console.error('Error copying:', error);
        showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', 'error');
    }
}

// Fallback copy function
function fallbackCopyToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.top = '0';
    textArea.style.left = '0';
    textArea.style.width = '2em';
    textArea.style.height = '2em';
    textArea.style.padding = '0';
    textArea.style.border = 'none';
    textArea.style.outline = 'none';
    textArea.style.boxShadow = 'none';
    textArea.style.background = 'transparent';
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            showAlert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üìã', 'success');
        } else {
            showAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Ctrl+C', 'error');
        }
    } catch (err) {
        console.error('Fallback copy error:', err);
        showAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Ctrl+C', 'error');
    }
    
    document.body.removeChild(textArea);
}

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
function downloadCSV(date) {
    const records = attendanceData[date];
    if (!records || records.length === 0) {
        showAlert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î', 'error');
        return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV content ‡∏û‡∏£‡πâ‡∏≠‡∏° BOM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const BOM = '\uFEFF';
    const headers = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πá‡∏Å', '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤'];
    const rows = records.map(record => [
        date,
        record.time,
        record.studentId,
        record.studentName,
        record.classroom,
        getStatusText(record.status),
        record.teacher,
        record.timeSlot
    ]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV string
    const csvContent = BOM + [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á download link
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `attendance_${date}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showAlert(`‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå attendance_${date}.csv ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üíæ`, 'success');
}

// Open Google Sheets
function openGoogleSheets() {
    const sheetUrl = document.getElementById('outputSheetUrl').value.trim();
    
    if (!sheetUrl) {
        showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Google Sheets', 'error');
        return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Google Sheets
    if (!sheetUrl.includes('docs.google.com/spreadsheets')) {
        showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Google Sheets', 'error');
        return;
    }
    
    // ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    window.open(sheetUrl, '_blank');
}

// Export data to Google Sheets
async function exportDataToSheets() {
    const sheetUrl = document.getElementById('outputSheetUrl').value.trim();
    const date = document.getElementById('reportDate').value;
    
    if (!sheetUrl) {
        showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Google Sheets', 'error');
        return;
    }
    
    if (!date || !attendanceData[date]) {
        showAlert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', 'error');
        return;
    }
    
    // ‡πÅ‡∏¢‡∏Å Spreadsheet ID ‡∏à‡∏≤‡∏Å URL
    const match = sheetUrl.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    if (!match) {
        showAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô Spreadsheet ID ‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏î‡πâ', 'error');
        return;
    }
    
    const spreadsheetId = match[1];
    const API_KEY = 'YOUR_API_KEY_HERE'; // *** ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà API Key ‡∏à‡∏£‡∏¥‡∏á ***
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    const records = attendanceData[date];
    const headers = [['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πá‡∏Å', '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤']];
    
    const values = records.map(record => [
        date,
        record.time,
        record.studentId,
        record.studentName,
        record.classroom,
        getStatusText(record.status),
        record.teacher,
        record.timeSlot
    ]);
    
    // ‡∏£‡∏ß‡∏° headers ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const allData = [...headers, ...values];
    
    showAlert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets...', 'success');
    
    try {
        // ‡πÉ‡∏ä‡πâ Google Sheets API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const range = `Sheet1!A:H`; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ñ‡∏∂‡∏á H
        const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}:append?valueInputOption=USER_ENTERED&key=${API_KEY}`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                values: allData
            })
        });
        
        if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        }
        
        showAlert('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        
        // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (confirm('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            window.open(sheetUrl, '_blank');
        }
        
    } catch (error) {
        console.error('Error exporting to Google Sheets:', error);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ manual export
        showManualExportInstructions(allData);
    }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ export ‡πÅ‡∏ö‡∏ö manual
function showManualExportInstructions(data) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà copy ‡πÑ‡∏î‡πâ
    const csvContent = data.map(row => row.join('\t')).join('\n');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h2>üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Google Sheets</h2>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            
            <div class="help-section">
                <p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Google Sheets:</p>
                
                <h3>üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</h3>
                <ol style="margin-left: 20px; color: #555;">
                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
                    <li>‡πÄ‡∏õ‡∏¥‡∏î Google Sheets</li>
                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏•‡∏•‡πå A1</li>
                    <li>‡∏Å‡∏î Ctrl+V (Windows) ‡∏´‡∏£‡∏∑‡∏≠ Cmd+V (Mac) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á</li>
                </ol>
                
                <div style="margin: 20px 0;">
                    <button onclick="copyDataToClipboard('${btoa(csvContent)}')" style="background: #34a853;">
                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </button>
                    <button onclick="openGoogleSheets()" style="background: #4285f4;">
                        üìä ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets
                    </button>
                </div>
                
                <h3>üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å:</h3>
                <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; overflow-x: auto; max-height: 300px;">
                    <pre style="margin: 0; font-size: 12px;">${csvContent}</pre>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á clipboard
function copyDataToClipboard(encodedData) {
    const data = atob(encodedData);
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(data).then(() => {
            showAlert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ô‡∏≥‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Google Sheets ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢', 'success');
        }).catch(() => {
            fallbackCopyToClipboard(data);
        });
    } else {
        fallbackCopyToClipboard(data);
    }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏Ç‡∏≠‡∏á Google Sheets
function saveOutputSheetUrl() {
    const url = document.getElementById('outputSheetUrl').value;
    if (url) {
        localStorage.setItem('outputSheetUrl', url);
    }
}

// Close modal when clicking outside
window.onclick = function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
}